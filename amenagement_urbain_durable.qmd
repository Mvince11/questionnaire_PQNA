---
title: ""
lang: fr
back-to-top-navigation: true
format:
  html:
    page-layout: custom 
---

```{r}
#| echo: FALSE
#| include: FALSE

library(dplyr)
library(readxl)
library(stringr)

intro <- read_xlsx("data/Amenagement_urbain_durable.xlsx") %>%
  filter(!is.na(Numero), !is.na(Questions), !is.na(Reponses)) %>%   # on garde que les lignes complètes
  mutate(
    Numero = as.character(Numero)                                   # on garde le format textuel (1.0, 1.1)
  ) %>%
  arrange(Numero, Questions)

questions_list <- intro %>%
  group_by(Numero,Parent, Questions, Style, Condition) %>%
  summarise(reponses = list(Reponses), .groups = "drop") %>%
  arrange(Numero)

questions_list$reponses <- strsplit(as.character(questions_list$reponses), ";")

questions_list

```

```{=html}
<script>
document.addEventListener("DOMContentLoaded", function () {
  const normalize = s => String(s || "").trim().toLowerCase();
  const valIntro = localStorage.getItem("q2");  // ce qui a été sauvegardé

  console.log("Valeur récupérée :", valIntro); // debug

  document.querySelectorAll(".conditional[data-parent-question='q2']").forEach(block => {
    const expected = normalize(block.dataset.condition);
    if (normalize(valIntro) === expected) {
      block.style.display = "block";   // on montre
    } else {
      block.style.display = "none";    // on cache
    }
  });
});
</script>
```


```{=html}

<script>window.currentProgressStep = 3;</script>
<script>
document.addEventListener("DOMContentLoaded", function () {
  const bar = document.getElementById('progress-bar');
  if (!bar) return;

  let step = window.currentProgressStep || null;

  // fallback depuis l'URL
  if (!step) {
    const m = window.location.pathname.match(/(\d+)/);
    if (m) step = parseInt(m[1], 10);
  }

  if (!step || isNaN(step)) step = 1;

  // Activer toutes les étapes jusqu'à l'étape courante
  for (let i = 1; i <= step; i++) {
    const item = bar.querySelector(`.progress-item[data-step="${i}"]`);
    if (item) item.classList.add('active');
  }
});
</script>

<div style="margin-left:10%; margin-right:10%;">
{{< include _includes/progression.html >}}
</div>
```

```{=html}

<script>
document.addEventListener("DOMContentLoaded", function () {
  const normalize = s => String(s||"").trim().toLowerCase();

  function parseExpected(cond) {
    if (!cond) return [];
    return cond.split(",").map(s => s.trim()).filter(Boolean).map(s => s.toLowerCase());
  }

  function updateForParent(parentName) {
    // sélection des blocs conditionnels pour CE parent
    const blocks = document.querySelectorAll(`.conditional[data-parent-question='${parentName}']`);
    if (!blocks) return;

    // valeurs attendues par bloc et état du parent
    const parentEls = Array.from(document.querySelectorAll(`[name='${parentName}']`));
    // collect selected values of the parent
    const selected = [];
    parentEls.forEach(el => {
      if ((el.type === "radio" || el.type === "checkbox") && el.checked) selected.push(normalize(el.value));
      else if (el.tagName === "SELECT" && el.value) selected.push(normalize(el.value));
      else if ((el.tagName === "TEXTAREA" || el.type === "text") && el.value) selected.push(normalize(el.value));
    });

    blocks.forEach(block => {
      const expected = parseExpected(block.dataset.condition); // array lowercase
      const show = expected.some(e => selected.includes(e));
      block.style.display = show ? "block" : "none";
    });
  }

  // bind change listeners to all controls that have a name
  const controls = document.querySelectorAll("input[name], select[name], textarea[name]");
  controls.forEach(ctrl => {
    ctrl.addEventListener("change", function (e) {
      const parentName = e.target.name;
      updateForParent(parentName);
    });
  });

  // init: run updates for all parents present in the page
  const parents = new Set();
  document.querySelectorAll(".conditional").forEach(b => {
    if (b.dataset.parentQuestion) parents.add(b.dataset.parentQuestion);
  });
  parents.forEach(p => updateForParent(p));
});
</script>

```

```{=html}
<div style="border: 1px solid #f6f3f3;
            margin-left:10%;
            margin-right: 10%;">
            
   <div style="color: red; font-size:0.8rem; margin-top: 3px; margin-bottom: 40px; margin-left: 10px;">*Champs obligatoires</div>          
            

        <div style="margin-left:4%;
                    margin-right:4%;
                    text-align: left;
                    font-family: Arial,sans-serif, monospace;
                    color: rgba(41,37,116,1) !important;
                    font-weight: bold;
                    margin-bottom: 70px;"
                    >
            <h4 style="font-weight: bold;"> Aménagement urbain durable </h4>
            
            <br>
                    
            <div> Le changement climatique appelle à repenser l’aménagement en faveur d’espaces urbains vivables.</div>             <div> Concrètement, il s’agit de combiner différentes expertises pour envisager des solutions globales : qualité du cadre de vie, revitalisation de quartier, développement des mobilités douces, renaturation, protection de la biodiversité, gestion des nuisances, gestion des déchets du BTP, etc.
Cette approche s’applique aussi bien à l’échelle du quartier (écoquartiers) que de l’îlot (cour d’école résiliente).
            </div>
            
            <br>
        
        </div>
```


```{r, results='asis'}
#| echo: FALSE

library(stringr)

for (i in seq_len(nrow(questions_list))) {
  numero     <- as.character(questions_list$Numero[i])
  question   <- questions_list$Questions[i]
  style      <- ifelse(is.na(questions_list$Style[i]), "radio", questions_list$Style[i])
  condition  <- if ("Condition" %in% names(questions_list)) questions_list$Condition[i] else NA
  parent_col <- if ("Parent" %in% names(questions_list)) questions_list$Parent[i] else NA
  reponses   <- unlist(questions_list$reponses[i])  

  # --- bloc conditionnel ou non ---
  if (!is.na(parent_col) && nzchar(parent_col)) {
    cond_safe <- ifelse(is.na(condition), "", gsub("'", "&#39;", condition))
    condition_attr <- sprintf(
      "class='question-block conditional' data-parent-question='q%s' data-condition='%s' style='display:none; margin:20px 0; padding:15px; margin-left:4%%; margin-right:4%%;'",
      parent_col, cond_safe
    )
  } else {
    condition_attr <- "class='question-block' style='margin:20px 0; padding:15px; margin-left:4%; margin-right:4%;'"
  }

  # --- ouverture du bloc question ---
  cat(sprintf("<div %s id='q%s'>\n", condition_attr, numero))
  cat(sprintf("  <p style='font-weight:bold; font-size:1rem; color:#293574;'>%s <span style='color:red;'>*</span></p>\n",
              question))

  # --- affichage des réponses ---
  if (style == "radio") {
    for (j in seq_along(reponses)) {
      id  <- paste0("q", numero, "_", j)
      val <- reponses[j]
      required_attr <- if (j == 1) "required" else ""
      cat(sprintf(
        "  <input type='radio' id='%s' name='q%s' value='%s' %s>\n  <label for='%s'
        style='display:inline-block; margin:4px 15px 4px 0; border-color:rgba(239,119,87,1); color:#293574; font-weight:bold; opacity:0.9;'>%s</label>\n",
        id, numero, gsub("'", "&#39;", val), required_attr, id, val
      ))
    }

  } else if (style == "checkbox") {
    for (j in seq_along(reponses)) {
      id  <- paste0("q", numero, "_", j)
      val <- reponses[j]
      cat(sprintf(
        "<div class='option-line'>\n  <input type='checkbox' id='%s' name='q%s' value='%s'>\n  <label for='%s'
        style='display:contents; margin:4px 10px 4px 0; color:#293574; font-weight:bold; opacity:0.9;'>%s</label>\n</div>\n",
        id, numero, gsub("'", "&#39;", val), id, val
      ))
    }

  } else if (style == "textarea") {
    cat(sprintf(
      "  <textarea name='q%s' rows='4' cols='50' required style='width:100%%; margin-top:6px; color:#293574; font-weight:bold; opacity:0.9;'></textarea>\n",
      numero
    ))

  } else if (style == "select") {
    cat(sprintf(
      "  <select name='q%s' required
      style='width:100%%; margin-top:6px; border-color:rgba(239,119,87,1); border-radius:6px; height:35px; color:#293574; font-weight:bold; opacity:0.9;'>\n",
      numero
    ))
    for (r in reponses) {
      cat(sprintf("    <option value='%s'>%s</option>\n", gsub("'", "&#39;", r), r))
    }
    cat("  </select>\n")
  }

  # --- fermeture du bloc ---
  cat("</div>\n\n")
}

cat("</body>\n</html>")

```

```{=html}
</div>

```


```{=html}
<div class="custom-footer">
<button style="background-color: #ef7757;
  border-radius: 8px;
  font-size: 1.3rem;
  padding-left: 15px;
  padding-right: 15px;
  margin-left: 6px;
  font-family: normal;
  border-color: coral;"
  onclick="window.location.href='introduction.html';"> < Précédent</button>
  
  
{{< include _includes/custom_footer.html >}}

  
 <button style="background-color: #ef7757;
  border-radius: 8px;
  font-size: 1.3rem;
  padding-left: 15px;
  padding-right: 15px;
  margin-right: 6px;
  font-family: normal;
  border-color: coral;"
  onclick="window.location.href='dynamique_transition_territoriale.html';"> Suivant > </button>
  
  </div>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const dots = document.querySelectorAll("#footer-dots .dot");
  let step = window.currentProgressStep || null;

  // Fallback depuis l'URL si nécessaire
  if (!step) {
    const match = window.location.pathname.match(/(\d+)/);
    if (match) step = parseInt(match[1], 10);
  }

  if (!step || isNaN(step)) step = 1;

  // Activer le dot correspondant
  const activeDot = document.querySelector(`#footer-dots .dot[data-step="${step}"]`);
  if (activeDot) activeDot.classList.add("active");
});
</script>

```
