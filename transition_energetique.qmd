---
title: ""
lang: fr
back-to-top-navigation: true
format:
  html:
    page-layout: custom 
---

```{r}
#| echo: FALSE
#| include: FALSE

library(dplyr)
library(readxl)
library(stringr)

intro <- read_xlsx("data/transition_energetique.xlsx") %>%
  filter(!is.na(Numero), !is.na(Questions), !is.na(Reponses)) %>%
  mutate(Numero = as.character(Numero))

# Regroupement des réponses
questions_list <- intro %>%
  group_by(Numero, Parent, Questions, Style, Condition) %>%
  summarise(reponses = paste(Reponses, collapse = ";"), .groups = "drop") %>%
  mutate(
    Numero_main = as.integer(str_extract(Numero, "^[0-9]+")),
    Numero_sub = as.integer(str_extract(Numero, "(?<=\\.)[0-9]+")),
    Numero_sub = ifelse(is.na(Numero_sub), 0L, Numero_sub),
    reponses = strsplit(reponses, ";")  # transforme en vecteur
  ) %>%
  arrange(Numero_main, Numero_sub)


```

```{=html}

<script>window.currentProgressStep = 6;</script>
<script>
document.addEventListener("DOMContentLoaded", function () {
  const bar = document.getElementById('progress-bar');
  if (!bar) return;

  let step = window.currentProgressStep || null;

  // fallback depuis l'URL
  if (!step) {
    const m = window.location.pathname.match(/(\d+)/);
    if (m) step = parseInt(m[1], 10);
  }

  if (!step || isNaN(step)) step = 1;

  // Activer toutes les étapes jusqu'à l'étape courante
  for (let i = 1; i <= step; i++) {
    const item = bar.querySelector(`.progress-item[data-step="${i}"]`);
    if (item) item.classList.add('active');
  }
});
</script>

<div style="margin-left:10%; margin-right:10%;">
{{< include _includes/progression.html >}}
</div>
```

```{=html}

<script>
document.addEventListener("DOMContentLoaded", function () {
  const normalize = s => String(s || "").trim().toLowerCase();

  function parseExpected(cond) {
    if (!cond) return [];
    return cond.split(",").map(s => s.trim()).filter(Boolean).map(normalize);
  }

  function getSelectedValues(parentName) {
    const selected = [];
    const parentEls = document.querySelectorAll(`[name='${parentName}']`);
    parentEls.forEach(el => {
      if ((el.type === "radio" || el.type === "checkbox") && el.checked) {
        selected.push(normalize(el.value));
      } else if (el.tagName === "SELECT" && el.value) {
        selected.push(normalize(el.value));
      } else if ((el.tagName === "TEXTAREA" || el.type === "text") && el.value) {
        selected.push(normalize(el.value));
      }
    });
    return selected;
  }

  function updateBlock(block) {
    const expectedValues = parseExpected(block.dataset.condition);
    const parentNames = block.dataset.parentQuestion?.split(";").map(normalize) || [];

    let show = false;
    parentNames.forEach(parent => {
      const selected = getSelectedValues(parent);
      if (expectedValues.some(val => selected.includes(val))) {
        show = true;
      }
    });

    block.style.display = show ? "block" : "none";
    block.classList.toggle("visible", show);
  }

  function updateBlocksForParent(parentName) {
    document.querySelectorAll(".conditional").forEach(block => {
      const parentNames = block.dataset.parentQuestion?.split(";").map(normalize) || [];

      // NE PAS mettre à jour le bloc si c’est lui-même qui contient le champ déclencheur
      const parentField = document.querySelector(`[name='${parentName}']`);
      if (parentField && block.contains(parentField)) return;

      if (parentNames.includes(normalize(parentName))) {
        updateBlock(block);
      }
    });
  }

  // Bind change listeners
  const controls = document.querySelectorAll("input[name], select[name], textarea[name]");
  controls.forEach(ctrl => {
    ctrl.addEventListener("change", function (e) {
      updateBlocksForParent(e.target.name);
    });
  });

  // Initial rendering
  document.querySelectorAll(".conditional").forEach(updateBlock);
});
</script>

```

```{=html}
<div style="border: 1px solid #f6f3f3;
            margin-left:10%;
            margin-right: 10%;">
            
   <div style="color: red; font-size:0.8rem; margin-top: 3px; margin-bottom: 40px; margin-left: 10px;">*Champs obligatoires</div>          
            

        <div style="margin-left:4%;
                    margin-right:4%;
                    text-align: left;
                    font-family: Arial,sans-serif, monospace;
                    color: rgba(41,37,116,1) !important;
                    font-weight: bold;
                    margin-bottom: 70px;"
                    >
            <h4 style="font-weight: bold;"> Transition énergétique </h4>
            
            <br>
                    
            <div> La transition énergétique se définit par l’évolution des modèles de production, de distribution et de consommation d’énergie pour les rendre plus écologiques. Concrètement, vous pouvez agir sur
                  <li style="margin-left: 12px;">La consommation d’énergie en privilégiant la sobriété (prioriser les besoins énergétiques essentiels dans les usages individuels et collectifs de l’énergie) et l'efficacité (réduire la quantité d’énergie nécessaire à la satisfaction d’un même besoin)
                  </li>
                  <li style="margin-left: 12px;">La distribution : favoriser la distribution et la disponibilité des énergies renouvelables et nouveaux carburants.
                  </li>
            </div>
            
            <br>
        
        </div>
```

```{r, results='asis'}
#| echo: FALSE

library(stringr)

for (i in seq_len(nrow(questions_list))) {
  numero     <- as.character(questions_list$Numero[i])
  question   <- questions_list$Questions[i]
  style      <- ifelse(is.na(questions_list$Style[i]), "radio", questions_list$Style[i])
  condition  <- if ("Condition" %in% names(questions_list)) questions_list$Condition[i] else NA
  parent_col <- if ("Parent" %in% names(questions_list)) questions_list$Parent[i] else NA
  reponses   <- unlist(questions_list$reponses[i])  

  # --- bloc conditionnel ou non ---
  if (!is.na(parent_col) && nzchar(parent_col)) {
    cond_safe <- ifelse(is.na(condition), "", gsub("'", "&#39;", condition))
    condition_attr <- sprintf(
      "class='question-block conditional' data-parent-question='q%s' data-condition='%s' style='display:none; margin:20px 0; padding:15px; margin-left:4%%; margin-right:4%%;'",
      parent_col, cond_safe
    )
  } else {
    condition_attr <- "class='question-block' style='margin:20px 0; padding:15px; margin-left:4%; margin-right:4%;'"
  }

  # --- ouverture du bloc question ---
  cat(sprintf("<div %s id='q%s'>\n", condition_attr, numero))
  cat(sprintf("  <p style='font-weight:bold; font-size:1rem; color:#293574;'>%s <span style='color:red;'>*</span></p>\n",
              question))

  # --- affichage des réponses ---
  if (style == "radio") {
    for (j in seq_along(reponses)) {
      id  <- paste0("q", numero, "_", j)
      val <- reponses[j]
      required_attr <- if (j == 1) "required" else ""
      cat(sprintf(
        "  <input type='radio' id='%s' name='q%s' value='%s' %s>\n  <label for='%s'
        style='display:inline-block; margin:4px 15px 4px 0; border-color:rgba(239,119,87,1); color:#293574; font-weight:bold; opacity:0.9;'>%s</label>\n",
        id, numero, gsub("'", "&#39;", val), required_attr, id, val
      ))
    }

  } else if (style == "checkbox") {
    for (j in seq_along(reponses)) {
      id  <- paste0("q", numero, "_", j)
      val <- reponses[j]
      cat(sprintf(
        "<div class='option-line'>\n  <input type='checkbox' id='%s' name='q%s' value='%s'>\n  <label for='%s'
        style='display:contents; margin:4px 10px 4px 0; color:#293574; font-weight:bold; opacity:0.9;'>%s</label>\n</div>\n",
        id, numero, gsub("'", "&#39;", val), id, val
      ))
    }

  } else if (style == "textarea") {
    cat(sprintf(
      "  <textarea name='q%s' rows='4' cols='50' required style='width:100%%; margin-top:6px; color:#293574; font-weight:bold; opacity:0.9;'></textarea>\n",
      numero
    ))

  } else if (style == "select") {
    cat(sprintf(
      "  <select name='q%s' required
      style='width:100%%; margin-top:6px; border-color:rgba(239,119,87,1); border-radius:6px; height:35px; color:#293574; font-weight:bold; opacity:0.9;'>\n",
      numero
    ))
    for (r in reponses) {
      cat(sprintf("    <option value='%s'>%s</option>\n", gsub("'", "&#39;", r), r))
    }
    cat("  </select>\n")
  }

  # --- fermeture du bloc ---
  cat("</div>\n\n")
}

cat("</body>\n</html>")

```

```{=html}
</div>

```

```{=html}
<script>
document.addEventListener("DOMContentLoaded", function () {
  const normalize = s => String(s || "").trim().toLowerCase();
  const valIntro = normalize(localStorage.getItem("q2"));

  // Bloc question 18a (syndicat mixte)
  const q18a = document.querySelector('#q18a');
  if (q18a) {
    if (valIntro === "un syndicat mixte") {
      q18a.style.display = "block";
      q18a.classList.add("visible");
    } else {
      q18a.style.display = "none";
      q18a.classList.remove("visible");
    }
  }

  // Bloc question 8 (autres cas)
  const q18 = document.querySelector('#q18');
  if (q18) {
    if (valIntro !== "un syndicat mixte") {
      q18.style.display = "block";
      q18.classList.add("visible");
    } else {
      q18.style.display = "none";
      q18.classList.remove("visible");
    }
  }
});
</script>

```

```{=html}
<div class="custom-footer">
<button style="background-color: #ef7757;
  border-radius: 8px;
  font-size: 1.3rem;
  padding-left: 15px;
  padding-right: 15px;
  margin-left: 6px;
  font-family: normal;
  border-color: coral;"
  onclick="window.location.href='introduction.html';"> < Précédent</button>
  
  
{{< include _includes/custom_footer.html >}}

  
 <button style="background-color: #ef7757;
  border-radius: 8px;
  font-size: 1.3rem;
  padding-left: 15px;
  padding-right: 15px;
  margin-right: 6px;
  font-family: normal;
  border-color: coral;"
  onclick="window.location.href='transition_energetique.html';"> Suivant > </button>
  
  </div>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const dots = document.querySelectorAll("#footer-dots .dot");
  let step = window.currentProgressStep || null;

  // Fallback depuis l'URL si nécessaire
  if (!step) {
    const match = window.location.pathname.match(/(\d+)/);
    if (match) step = parseInt(match[1], 10);
  }

  if (!step || isNaN(step)) step = 1;

  // Activer le dot correspondant
  const activeDot = document.querySelector(`#footer-dots .dot[data-step="${step}"]`);
  if (activeDot) activeDot.classList.add("active");
});
</script>

```

