---
title: ""
lang: fr
back-to-top-navigation: true
format:
  html:
    page-layout: custom 
---


```{r}
#| echo: FALSE
#| include: FALSE

library(dplyr)
library(readxl)
library(stringr)

intro <- read_xlsx("data/Introduction.xlsx") %>%
  filter(!is.na(Numero), !is.na(Questions), !is.na(Reponses)) %>%   # on garde que les lignes complètes
  mutate(
    Numero = as.character(Numero)                                   # on garde le format textuel (1.0, 1.1)
  ) %>%
  arrange(Numero, Questions)

questions_list <- intro %>%
  group_by(Numero,Parent, Questions, Style, Condition) %>%
  summarise(reponses = list(Reponses), .groups = "drop") %>%
  arrange(Numero)

questions_list$reponses <- strsplit(as.character(questions_list$reponses), ";")


questions_list

```

```{=html}
<script>
document.addEventListener("DOMContentLoaded", function () {
  document.querySelectorAll("select[name='q2'], input[name='q2']").forEach(el => {
    el.addEventListener("change", function () {
      let value;

      if (el.type === "radio" || el.type === "checkbox") {
        if (el.checked) value = el.value;
      }

      if (el.tagName === "SELECT") {
        value = el.value;
      }

      if (value !== undefined) {
        localStorage.setItem("q2", value);
        console.log("Réponse q2 enregistrée :", value);
      }
    });
  });
});
</script>


```


```{=html}

<script>window.currentProgressStep = 1;</script>
<script>
document.addEventListener("DOMContentLoaded", function () {
  const bar = document.getElementById('progress-bar');
  if (!bar) return;

  // priorité : variable JS définie dans la page
  let step = window.currentProgressStep || null;

  // fallback : déduire depuis URL (si tu le veux)
  if (!step) {
    const m = window.location.pathname.match(/(\d+)/);
    if (m) step = parseInt(m[1], 10);
  }

  if (!step || isNaN(step)) step = 1;

  const active = bar.querySelector(`.progress-item[data-step="${step}"]`);
  if (active) active.classList.add('active');
});
</script>

<div style="margin-left:10%; margin-right:10%;">
{{< include _includes/progression.html >}}
</div>
```

```{=html}
<div style="border: 1px solid #f6f3f3;
            margin-left:10%;
            margin-right: 10%;">
            
   <div style="color: red; font-size:0.8rem; margin-top: 3px; margin-bottom: 40px; margin-left: 10px;">*Champs obligatoires</div>          
            

        <div style="margin-left:4%;
                    margin-right:4%;
                    text-align: left;
                    font-family: Arial,sans-serif, monospace;
                    color: rgba(41,37,116,1) !important;
                    font-weight: bold;
                    margin-bottom: 70px;"
                    >
            <div> Centre d'études et d'expertise sur les risques, l'environnement, la mobilité et l'aménagement, le Cerema accompagne les       collectivités pour anticiper les effets du changement climatique, réduire la vulnérabilité et renforcer la résilience territoriale.
            </div>
            
            <br>
            
            <div> Votre collectivité / groupement de collectivités a récemment adhéré au Cerema et bénéficie à ce titre d’une relation partenariale renforcée avec notre établissement. Afin de mieux connaître les forces et besoins de votre territoire sur les principaux leviers de la transition et de l’adaptation au changement climatique, il vous est proposé de réaliser ce diagnostic en ligne. A l'issue du questionnaire, vous disposerez d’un rapport avec des pistes de réflexion et exemples de solutions concrètes en lien avec nos champs d’actions. Des échanges complémentaires avec votre référent permettront de préciser, au besoin, vos priorités d’actions.
            </div>
            
            <br>
            
            <div>
        Le Cerema s'engage à observer et à faire observer la plus stricte confidentialité à l’égard des informations délivrées dans le présent questionnaire. Le Cerema s’engage à ce que ces informations soient traitées avec le même degré de protection qu’il accorde à ses propres informations confidentielles et ne soient communiquées qu'aux seuls membres de son personnel permanent ou temporaire ayant à les connaitre.
            </div>
        
        </div>
```

```{=html}

<script>
document.addEventListener("DOMContentLoaded", function () {
  const normalize = s => String(s||"").trim().toLowerCase();

  function parseExpected(cond) {
    if (!cond) return [];
    return cond.split(",").map(s => s.trim()).filter(Boolean).map(s => s.toLowerCase());
  }

  function updateForParent(parentName) {
    // sélection des blocs conditionnels pour CE parent
    const blocks = document.querySelectorAll(`.conditional[data-parent-question='${parentName}']`);
    if (!blocks) return;

    // valeurs attendues par bloc et état du parent
    const parentEls = Array.from(document.querySelectorAll(`[name='${parentName}']`));
    // collect selected values of the parent
    const selected = [];
    parentEls.forEach(el => {
      if ((el.type === "radio" || el.type === "checkbox") && el.checked) selected.push(normalize(el.value));
      else if (el.tagName === "SELECT" && el.value) selected.push(normalize(el.value));
      else if ((el.tagName === "TEXTAREA" || el.type === "text") && el.value) selected.push(normalize(el.value));
    });

    blocks.forEach(block => {
      const expected = parseExpected(block.dataset.condition); // array lowercase
      const show = expected.some(e => selected.includes(e));
      block.style.display = show ? "block" : "none";
    });
  }

  // bind change listeners to all controls that have a name
  const controls = document.querySelectorAll("input[name], select[name], textarea[name]");
  controls.forEach(ctrl => {
    ctrl.addEventListener("change", function (e) {
      const parentName = e.target.name;
      updateForParent(parentName);
    });
  });

  // init: run updates for all parents present in the page
  const parents = new Set();
  document.querySelectorAll(".conditional").forEach(b => {
    if (b.dataset.parentQuestion) parents.add(b.dataset.parentQuestion);
  });
  parents.forEach(p => updateForParent(p));
});
</script>

```

```{r, results='asis'}
#| echo: FALSE

library(stringr)

for (i in seq_len(nrow(questions_list))) {
  numero     <- as.character(questions_list$Numero[i])
  question   <- questions_list$Questions[i]
  style      <- ifelse(is.na(questions_list$Style[i]), "radio", questions_list$Style[i])
  condition  <- if ("Condition" %in% names(questions_list)) questions_list$Condition[i] else NA
  parent_col <- if ("Parent" %in% names(questions_list)) questions_list$Parent[i] else NA
  reponses   <- unlist(questions_list$reponses[i])

  # --- conditionnel ou non ---
  if (!is.na(parent_col) && nzchar(parent_col)) {
    cond_safe <- ifelse(is.na(condition), "", gsub("'", "&#39;", condition))
    condition_attr <- sprintf(
      "class='question-block conditional' data-parent-question='q%s' data-condition='%s' style='display:none; margin:20px 0; padding:15px; margin-left:4%%; margin-right:4%%;'",
      parent_col, cond_safe
    )
  } else {
    condition_attr <- "class='question-block' style='margin:20px 0; padding:15px; margin-left:4%; margin-right:4%;'"
  }

  # --- bloc question ---
  cat(sprintf("<div %s id='q%s'>\n", condition_attr, numero))
  cat(sprintf("  <p style='font-weight:bold; font-size:1rem; color:#293574;'>%s<span style='color:red;'>*</span></p>\n",
              question))

  # --- réponses selon le style ---
  if (style == "radio") {
    for (j in seq_along(reponses)) {
      id  <- paste0("q", numero, "_", j)
      val <- reponses[j]
      required_attr <- if (j == 1) "required" else ""
      cat(sprintf(
        "  <input type='radio' id='%s' name='q%s' value='%s' %s>\n  <label for='%s'
        style='display:inline-block; margin:4px 15px 4px 0; border-color:rgba(239,119,87,1); color:#293574; font-weight:bold; opacity:0.9;'>%s</label>\n",
        id, numero, gsub("'", "&#39;", val), required_attr, id, val
      ))
    }

  } else if (style == "checkbox") {
    # Les checkboxes ne supportent pas bien "required" en HTML natif
    for (j in seq_along(reponses)) {
      id  <- paste0("q", numero, "_", j)
      val <- reponses[j]
      cat(sprintf(
        "  <input type='checkbox' id='%s' name='q%s' value='%s'>\n  <label for='%s'
        style='display:inline-block; margin:4px 10px 4px 0; color:#293574; font-weight:bold; opacity:0.9;'>%s</label>\n",
        id, numero, gsub("'", "&#39;", val), id, val
      ))
    }

  } else if (style == "textarea") {
    cat(sprintf(
      "  <textarea name='q%s' rows='4' cols='50' required style='width:100%%; margin-top:6px; color:#293574; font-weight:bold; opacity:0.9;'></textarea>\n",
      numero
    ))

  } else if (style == "select") {
    cat(sprintf(
      "  <select name='q%s' required
      style='width:100%%; margin-top:6px; border-color:rgba(239,119,87,1); border-radius:6px; height:35px; color:#293574; font-weight:bold; opacity:0.9;'>\n",
      numero
    ))
    for (r in reponses) {
      cat(sprintf("    <option value='%s'>%s</option>\n", gsub("'", "&#39;", r), r))
    }
    cat("  </select>\n")
  }

  cat("</div>\n\n")
}

cat("</body>\n</html>")



```

```{=html}
</div>

```

```{=html}
<script>
document.addEventListener("DOMContentLoaded", function () {
  const select = document.querySelector("select[name='q2']");
  console.log("Select trouvé :", select);

  if (select) {
    select.addEventListener("change", function () {
      localStorage.setItem("q2", select.value);
      console.log("Sauvegarde q2 =", select.value);
    });
  }
});
</script>
```


```{=html}
 <div class="custom-footer">

{{< include _includes/custom_footer.html >}}

 <button style="background-color: #ef7757;
  border-radius: 8px;
  font-size: 1.3rem;
  padding-left: 15px;
  padding-right: 15px;
  margin-right: 6px;
  font-family: normal;
  border-color: coral;"
  onclick="window.location.href='dynamique_transition_territoriale.html';"> Suivant > </button>
  
  </div>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const dots = document.querySelectorAll("#footer-dots .dot");
  let step = window.currentProgressStep || null;

  // Fallback depuis l'URL si nécessaire
  if (!step) {
    const match = window.location.pathname.match(/(\d+)/);
    if (match) step = parseInt(match[1], 10);
  }

  if (!step || isNaN(step)) step = 1;

  // Activer le dot correspondant
  const activeDot = document.querySelector(`#footer-dots .dot[data-step="${step}"]`);
  if (activeDot) activeDot.classList.add("active");
});
</script>

```